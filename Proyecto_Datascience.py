# -*- coding: utf-8 -*-
"""Proyecto Datascience.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_8JVpBfvrBfaz0ZVpeQSRhqPWwPRuWs-
"""

# Read Dataset
import pandas as pd
df = pd.read_excel('celac.xlsx')
df

#Dataprocessing
df.isnull().values.any()

#Getting list of countries
countries = df['Country'].drop_duplicates()
countries

# New cases in Paraguay
casos_paraguay = df[df['Country']=="Paraguay"]
casos_paraguay["New Cases"].plot()

# Total cases in Paraguay
casos_paraguay["Total Cases"].plot()

# Cases of entire Latin America and Caribbean
grouped = df.groupby("Date").sum()
grouped.plot(subplots=True) 
print("Total Cases: ", grouped["Total Cases"][-1])
print("Total Deaths: ", grouped["Total Deaths"][-1])

#Getting only Latam countries data

members = pd.read_excel('members of CELAC.xlsx')
latam = members["Spanish"].str.replace('\xa0', '')
latam_cases = df[df['Country'].isin(latam)]
latam_cases

# Cases in Latam

grouped_latam = latam_cases.groupby("Date").sum()
grouped_latam.plot(subplots=True) 
print("Total Cases: ", grouped_latam["Total Cases"][-1])
print("Total Deaths: ", grouped_latam["Total Deaths"][-1])

# Getting only Caribbean countries data

caribbean_cases = df[~df['Country'].isin(latam)]
caribbean_cases

# Cases in Caribbean

grouped_caribbean = caribbean_cases.groupby("Date").sum()
grouped_caribbean.plot(subplots=True) 
print("Total Cases: ", grouped_caribbean["Total Cases"][-1])
print("Total Deaths: ", grouped_caribbean["Total Deaths"][-1])

# Building choropleth map of total cases in all countries

!python -m pip install geopandas > /dev/null
!python -m pip install descartes > /dev/null
import geopandas

mapa = geopandas.read_file('custom.geo.json').rename(columns={"adm0_a3": "iso3"})
iso = pd.read_csv('iso.csv')
last_registers = df[df['Date'] == '2020-06-10']
with_iso = pd.merge(last_registers, iso, how='left', left_on='Country', right_on='name')
mapa = mapa.merge(with_iso, on="iso3")

#plot merged file. use dropna to remove any country with no revenue value
ax = mapa.plot(column='Total Cases', cmap =    
                                'plasma', figsize=(15,9),   
                                  k=3, legend =  
                                  True);

#add title to the map
ax.set_title('Countries by Total Cases', fontdict= 
            {'fontsize':24})
#remove axes
ax.set_axis_off()
#ax.get_figure()

# Dataset selection
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

dataset = grouped.reset_index()
trainX, testX, trainY, testY = train_test_split(np.float32(dataset.index), np.float32(dataset["Total Cases"]))

# Model fitting and visualization

from scipy import optimize

def logistic_function(x: float, h: float, w: float, b: float):
  return h / (1.0 + np.exp(-w * (x - b)))

params, _ = optimize.curve_fit(logistic_function, trainX, trainY)
mse = np.sum(np.square(testY - logistic_function(testX, *params))/len(testY))
rmse = np.sqrt(mse)
rrse = np.sqrt(np.sum(np.square(testY - logistic_function(testX, *params))) / np.sum(np.square(testY - np.mean(testY))))
acc = (1 - rrse) * 100
x = np.arange(0, 367)
print("MSE: ", mse)
print("RMSE: ", rmse)
print("RRSE: ", rrse)
print("Accuracy: ", acc, "%")
plt.plot(pd.date_range(start="2019-12-31", end="2020-12-31"), logistic_function(x, *params), label='Predicted pandemy progression')
plt.plot(dataset["Date"], dataset["Total Cases"], "o", label='Real pandemy progression')
plt.legend()
plt.show()

ranking = last_registers.sort_values("Total Cases", ascending=False).reset_index()
ranking

from datetime import datetime

worlddata = pd.read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
celac_actual = worlddata[worlddata["iso_code"].isin(with_iso["iso3"])]
groupped_celac = celac_actual[["date", "total_cases"]].dropna().groupby("date").sum()
groupped_celac.index = pd.to_datetime(groupped_celac.index)
x = x = np.arange(0, 367)
plt.plot(pd.date_range(start="2019-12-31", end="2020-12-31"), logistic_function(x, *params), label='Predicted pandemy progression')
plt.plot(groupped_celac.index, groupped_celac["total_cases"], "o", label='Real pandemy progression')
plt.legend()

trainX, testX, trainY, testY = train_test_split(np.float32(groupped_celac.reset_index().index), np.float32(groupped_celac["total_cases"]))
params_new, _ = optimize.curve_fit(logistic_function, trainX, trainY)

plt.plot(pd.date_range(start="2019-12-31", end="2020-12-31"), logistic_function(x, *params_new), label='Predicted pandemy progression')
plt.plot(groupped_celac.index, groupped_celac["total_cases"], "o", label='Real pandemy progression')
plt.legend()

